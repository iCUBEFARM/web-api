"""
Django settings for icf project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import datetime,timedelta
from dotenv import load_dotenv

from django.utils.translation import gettext_lazy as _

#
# Include logger settings
#

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#SERVER_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'server')
load_dotenv(os.path.join(BASE_DIR, ".env"))

SERVER_ROOT = os.path.join(BASE_DIR, 'server')

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "7ryg%u_=0!*pbrzc-slvaf+tvq6b$8$(fup6ha6(r8+04lga=0"
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '23.253.156.137', 'icf-dev', 'www.icubefarm.com',]

CORS_ORIGIN_WHITELIST = (

    'http://localhost:3005',
    'http://localhost:3000',
    'http://localhost:3001',
)

# Application definition

INSTALLED_APPS = [
    'dal',
    'dal_select2',
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_date_extensions',
    'django_filters',
    'corsheaders',
    'webpack_loader',

    'rest_framework',
    'drf_yasg',
    'knox',
  #  'rest_framework.authtoken',

    'allauth',
    'allauth.account',
    'rest_auth',
    'rest_auth.registration',
    'guardian',
    'anymail',

    'icf_generic',
    'icf_auth',
    'icf_item',
    'icf_entity',
    'icf_jobs',
    'icf_orders',
    'icf_messages',
    'icf_integrations',
    'icf_featuredevents',
    'icf_events',
    'icf_covid_status',
    'icf_career_fair',
    'icf_announcement',
    'django_summernote',
    'django_user_agents',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',

]

ROOT_URLCONF = 'icf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'icf.wsgi.application'

LOCALE_PATHS = [os.path.join(BASE_DIR, 'templates', 'credits', 'locale'),
                os.path.join(BASE_DIR, 'icf', 'locale'),
                os.path.join(BASE_DIR, 'templates', 'integrations', 'locale'),
                os.path.join(BASE_DIR, 'templates', 'featuredevents', 'locale'),
                os.path.join(BASE_DIR, 'templates', 'subscriptions', 'locale'),
                os.path.join(BASE_DIR, 'templates', 'account', 'email', 'locale'),
                os.path.join(BASE_DIR, 'templates', 'jobs', 'users', 'dynamic_resume', 'locale'),
                ]



# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
    ('es', _('Spanish')),
]

# Model Translation configuration
MODELTRANSLATION_LANGUAGES = ('en', 'fr', 'es',)
MODELTRANSLATION_FALLBACK_LANGUAGES = ('en', 'fr', 'es',)
MODELTRANSLATION_AUTO_POPULATE = True

TIME_ZONE = 'UTC'


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = "/static/"
MEDIA_URL = "/media/"

# Where static files will be created
# STATICFILES_DIRS is the list of folder where Django will search for additional static files,
# in addition to each static folder of each app installed.
STATICFILES_DIRS = (
  #  os.path.join(os.path.dirname(SERVER_ROOT), "static_cdn", "staticfiles"),
    os.path.join(BASE_DIR, "staticfiles"),
    os.path.join(SERVER_ROOT, "static_cdn", "staticfiles"),
    os.path.join(BASE_DIR, "assets"),
)

# STATIC_ROOT is the folder where every static files will be stored after a manage.py collectstatic
# This is the directory from which static resources are served when running the application.
# In the production this could be a different server / location like Amazon S3 Bucket
# STATIC_ROOT = os.path.join(os.path.dirname(SERVER_ROOT), "static_cdn", "static")
STATIC_ROOT = os.path.join(SERVER_ROOT, "static_cdn", "static")


# This is the directory where media uploaded by users of the site is stored
# MEDIA_ROOT is the folder where every files uploaded with an FileField will go.
# MEDIA_ROOT = os.path.join(os.path.dirname(SERVER_ROOT), "static_cdn", "media")
MEDIA_ROOT = os.path.join(SERVER_ROOT, "static_cdn", "media")

AUTH_USER_MODEL = 'icf_auth.User'

WEBPACK_LOADER = {
    'DEFAULT': {
            'BUNDLE_DIR_NAME': 'bundles/',
            'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.dev.json'),
        }
}

# All Auth Configuration
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_ADAPTER = "icf_auth.adapter.ICFAccountAdapter"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
OLD_PASSWORD_FIELD_ENABLED = True

SITE_ID = 1

# Rest Auth configuration
REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'icf_auth.api.serializers.ICFLoginSerializer',
    'TOKEN_SERIALIZER': 'icf_auth.api.serializers.ICFLoginTokenSerializer',
    'PASSWORD_RESET_SERIALIZER': 'icf_auth.api.serializers.ICFPasswordResetSerializer'
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'icf_auth.api.serializers.ICFRegisterSerializer',
}

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",

    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
    "guardian.backends.ObjectPermissionBackend",
)

REST_SESSION_LOGIN = True
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'knox.auth.TokenAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
}

REST_KNOX = {
    'TOKEN_TTL': timedelta(days=5)
}



SWAGGER_SETTINGS = {
    'DEFAULT_API_URL' : 'http://localhost:8000/api/',
    # 'LOGIN_URL': 'login',
    # 'LOGOUT_URL': 'logout',
}

#
# ANYMAIL Settings
#
# key-d7d2f14231caac963df8c13534ab0576
# rs1941027d1c2a4a2281824fb43d9f2a19.mailgun.org
ANYMAIL = {
    # (exact settings here depend on your ESP...)

    "MAILGUN_API_KEY": "key-d7d2f14231caac963df8c13534ab0576",
    "MAILGUN_SENDER_DOMAIN": 'mg.icubefarm.com'

    #"MAILGUN_API_KEY": "key-e7a0264b86d614ec1d8e1cadb3ab5023",
    #"MAILGUN_SENDER_DOMAIN": 'mg.pebblesense.com'


}
EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'
DEFAULT_FROM_EMAIL='icubetesting@icubefarm.com'


# Twilio test account
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_FROM_NUM = os.getenv("TWILIO_FROM_NUM")

ICF_OTP_MESSAGE = "Your iCUBEFARM.com confirmation code is  ICF_OTP. Complete your registration to enjoy our service."
ICF_SEND_OTP_DISABLED = True


from icf.logger import LOGGING
LOGGING['handlers']['file']['filename'] = os.path.join(SERVER_ROOT, 'logs', 'icf.log')
LOGGING['handlers']['otp_log_file']['filename'] = os.path.join(SERVER_ROOT, 'logs', 'integrations', 'icf_otp.log')
LOGGING['handlers']['payment_log_file']['filename'] = os.path.join(SERVER_ROOT, 'logs', 'integrations', 'payment_log_file.log')
LOGGING['handlers']['newsletter_log_file']['filename'] = os.path.join(SERVER_ROOT, 'logs', 'integrations', 'newsletter_log_file.log')
LOGGING['handlers']['featured_event_transaction_failed_log_file']['filename'] = os.path.join(SERVER_ROOT, 'logs', 'integrations', 'featured_event_transaction_failed_log_file.log')


#Statging root - SLNhTD

ICF_DEFAULT_AUTOSUGGESTION_LIMIT = 10

LAST_LOGIN = datetime(2018, 9, 29, 00, 00, 0, 00000)


# MAILCHIMP_API_KEY

NEWSLETTER_SERVICE = 'mailchimp'
# MAILCHIMP_API_KEY = "8158633833154d9aedc733765e6745fd-us16"
MAILCHIMP_API_KEY = os.getenv("MAILCHIMP_API_KEY")
MAILCHIMP_NL_LIST = {
    "en": "0930bf171a",  # English List
    "fr": "3f34682308",  # French List
    "es": "ae2efd458c"   # Spanish List
}


ICF_NOTIFICATION_SETTINGS = {
    'INVOICE_NOTIFICATION': _("An invoice notification has been sent to your email"),
    'INVOICE_NOTIFICATION_DETAIL':_("{}, {} by entity {}"),
    'ADD_USER_NOTIFICATION': _("You have been requested to accept an invitation"),
    'ADD_USER_ACCEPT_NOTIFICATION': _('Your invitation has been accepted by user'),
    'ADD_USER_REJECT_NOTIFICATION': _('Your invitation has been rejected by user'),
    'ADD_USER_DETAIL_NOTIFICATION': _('You are invited to join this entity'),
    'JOB_APPLIED_NOTIFICATION':_("A candidate applied for this job"),
    'JOB_APPLIED_NOTIFICATION_FRENCH':_("Un candidat a postulé pour ce poste"),
    'JOB_APPLIED_NOTIFICATION_SPANISH':_("Un candidato solicitó este trabajo"),
    'JOB_APPLIED_DETAIL_NOTIFICATION':_("{}, has applied for this job {} "),
    'JOB_APPLIED_DETAIL_NOTIFICATION_FRENCH':_("{}, a postulé pour ce poste {} "),
    'JOB_APPLIED_DETAIL_NOTIFICATION_SPANISH':_("{},ha solicitado este trabajo {} "),
    'JOB_SEEKER_NOTIFICATION':_("Your profile has been seen by the recruiter"),
    'JOB_SEEKER_NOTIFICATION_DETAIL':_(" of an entity - {}"),
    'JOB_SEEKER_STATUS_NOTIFICATION':_("your job profile status has been changed"),
    'PAYMENT_BILL_NOTIFICATION': _("A  payment  notification has been sent to your email"),

}
STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY", "pk_test_qeIt1HocyhWfB23AYC3DfByh")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", "sk_test_r8227drs6diRfWCMHzEWtndh")


DEFAULT_COUNTRY_FOR_COUNTRY_TAX = 'INDIA'

CONTACT_US_TO_EMAIL = 'msshwetha47@gmail.com'


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

USER_AGENTS_CACHE = None

FREE_CAREER_FAIR={
    "plan_name":"90 days subscription plan",
    "is_active":True
}


